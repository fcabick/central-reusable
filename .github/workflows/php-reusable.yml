name: Build Reusable PHP Workflow

on:
  workflow_call:
    inputs:
      language:
        description: 'PHP for the build'
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        type: string
    secrets:
      SONAR_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up PHP
        run: |
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt-get update
          sudo apt-get install -y php8.2 php8.2-cli php8.2-mbstring php8.2-dom

      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php
          HASH=$(curl -sS https://composer.github.io/installer.sig)
          php -r "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); } echo PHP_EOL;"
          sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer

      - name: Install PHP dependencies
        run: |
          composer install

      - name: Run unit tests
        run: |
          phpunit --testdox

      - name: Run SonarQube scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
        with:
          args: >
            -Dsonar.projectKey=fcabick_php-pipelines
            -Dsonar.organization=fcabick
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sources=php-pipelines/src

      - name: Wait for SonarCloud Quality Gate
        run: |
          echo "Waiting for SonarCloud Quality Gate to pass..."
          PROJECT_KEY=fcabick_php-pipelines
          STATUS=$(curl -s -X GET -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" | jq -r .projectStatus.status)
          echo "Quality Gate Status: $STATUS"

          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate failed. Exiting with error."
            exit 1
          else
            echo "Quality Gate passed."
          fi

      # Cria zip do projeto e sobe no arctifact
      - name: Create project archive
        run: |
            zip -r project.zip . -x ".git/*"  # Ignora a pasta .git para reduzir o tamanho do arquivo

      - name: Upload project as artifact
        uses: actions/upload-artifact@v3
        with:
          name: complete-project
          path: project.zip
